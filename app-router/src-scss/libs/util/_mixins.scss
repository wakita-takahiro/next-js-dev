// Mixin
//
// all browser 用 mixin, 下位ブラウザ用上書きは _asset.scss で行います
//
// Compatible in latest Browser
// Styleguide 2.3.0
@use "sass:math";
@use "sass:map";
@use "functions" as functions;
@use "../default-setting" as ds;

// styleguide:ignore:start
$arg: null;
$each-item: null;
// prc-each
// 拡張 each iterator
//
// $list - 捜査配列
// Styleguide 2.3.1
@mixin prc-each($list...) {
  // http://sass-lang.com/documentation/Sass/Script/Functions.html#length-instance_method
  // noinspection CssInvalidFunction
  @for $item from 1 through length($list) {
    $each-item: $item !global;
    // http://sass-lang.com/documentation/Sass/Script/Functions.html#nth-instance_method
    // noinspection CssInvalidFunction
    $arg: nth($list, $each-item) !global;
    @content;
  }
}
// styleguide:ignore:end

// clearfix
// Styleguide 2.3.2
@mixin clearfix {
  &::before,
  &::after {
    clear: both;
    content: "";
    display: block;
  }
}

// cf
// clearfix alias
// Styleguide 2.3.3
@mixin cf {
  @include clearfix;
}

// link-decoration
// link color
// a tag color 設定
// $color1 - hex, active color
// $color2 - hex, hover color
// $decoration-off=none - text-decoration: none
// $decoration-on=underline - text-decoration: underline
// Styleguide 2.3.4
@mixin link-decoration($color1, $color2, $decoration-off: none, $decoration-on: underline) {
  &:link,
  &:visited,
  &:hover,
  &:active {
    color: $color1;
    text-decoration: $decoration-off;
  }

  &:hover {
    color: $color2;
    text-decoration: $decoration-on;
  }
}

// fluid-img
// 画像 幅100%
// $w=null - width 設定値
// Styleguide 2.3.5
@mixin fluid-img($w: null) {
  height: auto;
  max-width: 100%;
  width: #{$w};
}

// font-smoothing
// CSS3 font-smoothing 設定
// $value=on - 設定値をどちらにするか
// Styleguide 2.3.6
@mixin font-smoothing($value: on) {
  @if $value == on {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// hide-text
// container text を隠します（背景画像表示のため）
// Styleguide 2.3.7
@mixin hide-text {
  font-size: 0;
  outline: none;
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap;
}

// ---------------------------

// pos-middle
// vertical middle にします
// $position=absolute - position option, absolute|fix
// Styleguide 2.3.8
@mixin pos-middle($position: absolute) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

// ellipsis
// ellipsisを設定します
// Styleguide 2.3.9
@mixin ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// background color rgba 設定します
// Styleguide 2.3.10
// sass-lint:disable no-color-literals
@mixin bgc-rgba($r, $g, $b, $a) {
  background-color: rgba($r, $g, $b, $a);
}
// sass-lint:enable no-color-literals

// -------------------------------------------------------------
// vw
// -------------------------------------------------------------
//// vw
//// 第一引数で基準となる画面幅のフォントサイズ、第二引数で基準となる画面幅を入力
//// $size {number} - 基準フォントサイズ(px)
//// $viewport {number} - 基準画面幅
//// Styleguide 2.3.19
//@function functions.get-vw($size, $viewport) {
//  $rate: 100 / $viewport;
//
//  @return $rate * $size * 1vw;
//}

// 可変サイズフォント(vw)を設定する
// $font-size: target font size (px) - default 10
// $viewport: 基準画面幅 - default 750
// @example
// @include(12, 750);
// 画面幅 750px 幅の時に 12px になる font
// Styleguide 2.3.20
// @mixin vw($font-size: 10, $viewport: 750) {
//   font-size: functions.get-vw($font-size, $viewport);
// }

// ---------------------------

// inputやselectなどのformパーツのstyleをresetします
// ex) @include asset.reset-form();
// Styleguide 2.3.11
@mixin reset-form {
  appearance: none;
  padding: 0;
  border: 0;
  border-radius: 0;
  outline: none;
  background: transparent;
  font-family: inherit;
}

// buttonタグのstyleをresetします
// ex) @include asset.reset-button();
@mixin reset-button {
  appearance: none;
  padding: 0;
  border: 0;
  background-color: transparent;
  font-family: inherit;
  cursor: pointer;
  user-select: none;
}

// -------------------------------------------------------------
// sprite image
// -------------------------------------------------------------
// sprite by spritesmith
// sprite sheet output mixin
// $props - example ref: _sprite.scss
// $modal-1992-lead-name: 'modal_1992_lead';
// $modal-1992-lead-x: 938px;
// $modal-1992-lead-y: 253px;
// $modal-1992-lead-offset-x: -938px;
// $modal-1992-lead-offset-y: -253px;
// $modal-1992-lead-width: 611px;
// $modal-1992-lead-height: 127px;
// $modal-1992-lead-total-width: 1549px;
// $modal-1992-lead-total-height: 735px;
// $modal-1992-lead-image: '/assets/images/history/sp/sprite/sprite-1992.png';
// $modal-1992-lead: (938px, 253px, -938px, -253px, 611px, 127px, 1549px, 735px, '/assets/images/history/sp/sprite/sprite-1992.png', 'modal_1992_lead', );
//
// $props {string[]} sprite 画像プロパティリスト
// $background-size {string|number=0} - background-size に使用します, 100% 100% / 100px 100px / auto auto ...
// - 0 以外指定の時に `background-size` property を設定します
// $aspect {number=1} - スケール比率 0.5 or 1 を指定する
//
// @example
// .modal-lead {
//   @include rao-sprite($modal-1992-lead, $sprite-1992-width, $sprite-1992-height);
// }
@mixin sprites($props, $background-size: 0, $aspect: 1) {
  width: nth($props, 5) * $aspect;
  height: nth($props, 6) * $aspect;
  // offset-x
  $x: nth($props, 3) * $aspect;
  // offset-y
  $y: nth($props, 4) * $aspect;
  // sprite size
  background: url(nth($props, 9)) no-repeat $x $y;
  @if $background-size != 0 {
    background-size: $background-size;
  }
}

// background-size の width / height を指定する時に使用します
// `sprites` でも同じ様に設定できます
// @example
// .sprite {
//   @include sprite-scale($modal-1992-lead, 100px, 50px);
// }
//
// .sprite {
//   @include sprites($modal-1992-lead, 100px 50px);
// }
// @see https://developer.mozilla.org/ja/docs/Web/CSS/background-size
@mixin sprite-scale($props, $width: 0, $height: 0, $aspect: 1) {
  @include sprites($props, 0, $aspect);

  @if $width != 0 and $height != 0 {
    background-size: $width $height;
  }
}

// sprite width / height
@mixin sprites-size($props, $aspect: 1) {
  height: nth($props, 6) * $aspect;
  width: nth($props, 5) * $aspect;
}

//  Function to create an optimized svg url
//  Version: 1.0.6
//  ref: https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//  Background svg mixin
@mixin background-svg($svg) {
  background-image: svg-url($svg);
}

// -----------------------------------------------
@mixin box($width, $height, $unit: "px") {
  width: #{$width}#{$unit};
  height: 0;
  padding-top: #{$height}#{$unit};
}

@mixin box-vw($width, $height, $base: 750) {
  width: functions.get-vw($width, $base);
  height: 0;
  padding-top: functions.get-vw($height, $base);
}

// link color を設定色に変更します
// @param {string} $color - color property value ex. #fff, rgb(0, 0, 0)...
@mixin link-color($color) {
  color: $color;

  &:link,
  &:visited {
    color: $color;
  }
}

// scroll bar を消した inline scroll (direction Y) container 設定を行います
@mixin scroll-y() {
  overflow-y: scroll;
  // ie
  -ms-overflow-style: none;
  // webkit
  &::-webkit-scrollbar {
    display: none;
  }
  // ff
  scrollbar-width: none;
  // ios touch
  -webkit-overflow-scrolling: touch;
}

// -----------------------------------------------
// ratio control
// 任意のアスペクト比で可変ボックスを作成
@mixin aspect-box($width, $height) {
  position: relative;

  &::before {
    display: block;
    width: 100%;
    // DEPRECATION WARNING: Using / for division is deprecated and will be removed in Dart Sass 2.0.0.
    // @see https://sass-lang.com/documentation/breaking-changes/slash-div
    //padding-top: ($height / $width) * 100%;
    padding-top: math.div($height, $width) * 100%;
    content: "";
  }
}

// -----------------------------------------------
// PS / AI font-size / line height から CSS line-height を計算します
// 単位なしを推奨します
@mixin line-height($font-size, $line-height) {
  // DEPRECATION WARNING: Using / for division is deprecated and will be removed in Dart Sass 2.0.0.
  // @see https://sass-lang.com/documentation/breaking-changes/slash-div
  //line-height: $line-height / $font-size;
  line-height: math.div($line-height, $font-size);
}

// -----------------------------------------------------------------------------------
// mixin
@mixin font-smoothing-rendering() {
  -moz-font-feature-settings: "liga", "kern";
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}

// https://developer.mozilla.org/ja/docs/Web/CSS/font-feature-settings
@mixin font-feature($settings: "palt") {
  font-feature-settings: $settings;
}

@mixin box-sizing($value: border-box) {
  box-sizing: $value;
}

// Media Queries を設定します
//
// MOBILE - @media
// --------------------
// $wrapperにclassやidを指定すると、wrapper内のみに適用されます
// $wrapper: wrapper element
// --------------------
@mixin mobile($wrapper: null) {
  @if $wrapper == null {
    @media only screen and (max-width: #{ds.$mobile-max-width}px) {
      @content;
    }
  } @else {
    @media only screen and (max-width: #{ds.$mobile-max-width}px) {
      #{$wrapper} {
        @content;
      }
    }
  }
}

// DESKTOP - @media
// --------------------
// $wrapper: wrapper element
// $wrapperにclassやidを指定すると、wrapper内のみに適用されます
// --------------------
@mixin desktop($wrapper: null) {
  @if $wrapper == null {
    @if ds.$tablet {
      @media screen and (min-width: #{ds.$tablet-width + 1}px) {
        @content;
      }
    } @else {
      @media screen and (min-width: #{ds.$mobile-max-width + 1}px) {
        @content;
      }
    }
  } @else {
    @if ds.$tablet {
      @media screen and (min-width: #{ds.$tablet-width + 1}px) {
        #{$wrapper} {
          @content;
        }
      }
    } @else {
      @media screen and (min-width: #{ds.$mobile-max-width + 1}px) {
        #{$wrapper} {
          @content;
        }
      }
    }
  }
}

// TABLET - @media
// --------------------
// $wrapper: wrapper element
// $wrapperにclassやidを指定すると、wrapper内のみに適用されます
// ds.$tablet flag で output
// --------------------
@mixin tablet($wrapper: null) {
  @if ds.$tablet {
    @if $wrapper == null {
      @media only screen and (min-width: #{ds.$mobile-max-width + 1}px) and (max-width: #{ds.$tablet-width}px) {
        @content;
      }
    } @else {
      @media only screen and (min-width: #{ds.$mobile-max-width + 1}px) and (max-width: #{ds.$tablet-width}px) {
        #{$wrapper} {
          @content;
        }
      }
    }
  }
}
